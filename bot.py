import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.enums import ParseMode

import os

TOKEN = "7839103259:AAFmxKA01JaiPIonoynWtwFjAZDwKnkttQo"
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

@dp.message(Command("start"))
async def send_welcome(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∞–≤—Ç–æ—Ç–æ–≤–∞—Ä–æ–≤ –≤ –ú—É—Ä–º–∞–Ω—Å–∫–µ.")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
products = {
    "–ú–æ—Ç–æ—Ä–Ω—ã–µ –º–∞—Å–ª–∞": [
        {"id": 1, "name": "–ú–∞—Å–ª–æ Castrol 5W-30", "price": 2500, "description": "–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–µ –º–æ—Ç–æ—Ä–Ω–æ–µ –º–∞—Å–ª–æ.", "photo": "https://example.com/oil.jpg"},
        {"id": 2, "name": "–ú–∞—Å–ª–æ Mobil 1 0W-40", "price": 2800, "description": "–í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –º–∞—Å–ª–æ –¥–ª—è –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π.", "photo": "https://example.com/mobil.jpg"}
    ],
    "–ê–Ω—Ç–∏—Ñ—Ä–∏–∑—ã –∏ –æ—Ö–ª–∞–∂–¥–∞—é—â–∏–µ –∂–∏–¥–∫–æ—Å—Ç–∏": [
        {"id": 3, "name": "–ê–Ω—Ç–∏—Ñ—Ä–∏–∑ G12 –∫—Ä–∞—Å–Ω—ã–π", "price": 1200, "description": "–û—Ö–ª–∞–∂–¥–∞—é—â–∞—è –∂–∏–¥–∫–æ—Å—Ç—å –¥–ª—è —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞.", "photo": "https://example.com/antifreeze.jpg"}
    ]
}
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor

TOKEN = "7839103259:AAFmxKA01JaiPIonoynWtwFjAZDwKnkttQo"
bot = Bot(token=TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)

# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.message_handler(commands=['catalog'])
async def show_catalog(message: types.Message):
    keyboard = InlineKeyboardMarkup()
    
    for category in products.keys():
        keyboard.add(InlineKeyboardButton(category, callback_data=f"category_{category}"))
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=keyboard)

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query_handler(lambda call: call.data.startswith("category_"))
async def show_products(call: types.CallbackQuery):
    category = call.data.split("_")[1]
    items = products.get(category, [])
    
    if not items:
        await call.message.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
        return
    
    for item in items:
        text = f"<b>{item['name']}</b>\nüíµ –¶–µ–Ω–∞: {item['price']} —Ä—É–±.\nüìå {item['description']}"
        await bot.send_photo(call.message.chat.id, item['photo'], caption=text)
    
    await call.answer()

executor.start_polling(dp, skip_updates=True)
@dp.callback_query_handler(lambda call: call.data.startswith("buy_"))
async def buy_product(call: types.CallbackQuery):
    product_id = int(call.data.split("_")[1])
    
    for category, items in products.items():
        for item in items:
            if item["id"] == product_id:
                await call.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {item['name']}\nüí∞ –¶–µ–Ω–∞: {item['price']} —Ä—É–±.\n–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –°–ë–ü.")
                return

    await call.answer("–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
